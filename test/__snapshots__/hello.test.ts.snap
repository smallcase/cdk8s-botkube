// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`botkube-configmap 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "resource_config.yaml": "testConfigMap",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-configmap",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "name": "botkube-cluster-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "*",
        ],
        "resources": Array [
          "*",
        ],
        "verbs": Array [
          "get",
          "watch",
          "list",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "botkube-clusterrole",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccounts",
        "name": "botkube-service-account",
      },
    ],
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
        "component": "controller",
      },
      "name": "botkube",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "app": "botkube",
          "component": "controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "botkube",
            "component": "controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "CONFIG_PATH",
                  "value": "/config/",
                },
                Object {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
              ],
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "name": "botkube",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/config",
                  "name": "config-volume",
                },
              ],
            },
          ],
          "nodeSelector": Object {},
          "securityContext": Object {
            "runAsGroup": 101,
            "runAsUser": 101,
          },
          "serviceAccountName": "botkube-sa",
          "tolerations": Array [],
          "volumes": Array [
            Object {
              "name": "config-volume",
              "projected": Object {
                "sources": Array [
                  Object {
                    "configMap": Object {
                      "name": "botkube-config-map",
                    },
                  },
                  Object {
                    "secret": Object {
                      "name": "botkube-communication-secret",
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
]
`;

exports[`botkube-default 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "resource_config.yaml": "[\\"## Resources you want to watch\\",\\"resources:\\",\\"- name: RESOURCE            # K8s Resource you want to monitor.\\",\\"                            # Resource name must be in\\",\\"                            # group/version/resource (G/V/R) format\\",\\"                            # for core resources with no group,\\",\\"                            # ignore group fron g/v/r and use v/r\\",\\"                            # resource name should be plural\\",\\"                            # (e.g v1/pods, v1.ingresses, etc)\\",\\"\\",\\"  namespaces:         \\",\\"    include:                # List of namespaces to monitor for\\",\\"                            # the RESOURCE events\\",\\"    - namespace/all         # Use all to monitor all the resources\\",\\"\\",\\"    ignore:                 # List of namespaces to be ignored\\",\\"                            # used only with include: all\\",\\"    - <namespace>           # example : include [all], ignore [x,y,z]\\",\\"\\",\\"  events:                   # List of lifecycle events you want to\\",\\"  - create                  # receive notifications about\\",\\"  - update                  # Valid options are: \\",\\"  - delete                  # create, update, delete, error OR all\\",\\"  - error\\",\\"  \\",\\"  updateSetting:            # Set include diff with the update event \\",\\"                            # about the changes in specific fields\\",\\"    includeDiff: true       # updateSettings are ignored if \`update\`\\",\\"                            # events are not configured for the resource\\",\\"\\",\\"    fields:\\",\\"    - JSONPath              # List of JSONPath expressions to monitor\\",\\"                            # changes in specific fields\\",\\"- name: apps/v1/deployments\\",\\"  namespaces:\\",\\"    include:\\",\\"    - dev\\",\\"    - qa\\",\\"    - default\\",\\"    ignore:\\",\\"    - kube-system\\",\\"    - prod\\",\\"  updateSetting:\\",\\"    includeDiff: true\\",\\"    fields:\\",\\"    - spec.template.spec.containers[*].image\\",\\"    - status.availableReplicas\\",\\"  events:\\",\\"  - all\\",\\"\\",\\"# Check true if you want to receive recommendations\\",\\"# about the best practices for the created resource\\",\\"recommendations: true\\",\\"\\",\\"# Cluster Setting to manage command execution access\\",\\"settings:\\",\\"  # Set cluster name to differentiate incoming messages\\",\\"  clustername: not-configured\\",\\"  # Kubectl executor configs\\",\\"  kubectl:\\",\\"    # Set true to enable kubectl commands execution\\",\\"    enabled: false\\",\\"    # List of allowed commands\\",\\"    commands:\\",\\"      # kubectl method which are allowed with BotKube command\\",\\"      verbs: [\\\\\\"api-resources\\\\\\", \\\\\\"api-versions\\\\\\", \\\\\\"cluster-info\\\\\\", \\\\\\"describe\\\\\\", \\\\\\"diff\\\\\\", \\\\\\"explain\\\\\\", \\\\\\"get\\\\\\", \\\\\\"logs\\\\\\", \\\\\\"top\\\\\\", \\\\\\"auth\\\\\\"]\\",\\"      # resources on which kubectl methods are allowed with BotKube commands\\",\\"      resources: [\\\\\\"deployments\\\\\\", \\\\\\"pods\\\\\\" , \\\\\\"namespaces\\\\\\", \\\\\\"daemonsets\\\\\\", \\\\\\"statefulsets\\\\\\", \\\\\\"storageclasses\\\\\\", \\\\\\"nodes\\\\\\"]\\",\\"    # set Namespace to execute botkube kubectl commands by default\\",\\"    defaultNamespace: default\\",\\"    # Set true to enable commands execution from configured channel only\\",\\"    restrictAccess: false\\",\\"  # Set true to enable config watcher\\",\\"  configwatcher: true\\",\\"  # Set false to disable upgrade notification\\",\\"  upgradeNotifier: true\\"]",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-configmap",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "name": "botkube-cluster-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "*",
        ],
        "resources": Array [
          "*",
        ],
        "verbs": Array [
          "get",
          "watch",
          "list",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "botkube-clusterrole",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccounts",
        "name": "botkube-service-account",
      },
    ],
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
        "component": "controller",
      },
      "name": "botkube",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "app": "botkube",
          "component": "controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "botkube",
            "component": "controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "CONFIG_PATH",
                  "value": "/config/",
                },
                Object {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
              ],
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "name": "botkube",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/config",
                  "name": "config-volume",
                },
              ],
            },
          ],
          "nodeSelector": Object {},
          "securityContext": Object {
            "runAsGroup": 101,
            "runAsUser": 101,
          },
          "serviceAccountName": "botkube-sa",
          "tolerations": Array [],
          "volumes": Array [
            Object {
              "name": "config-volume",
              "projected": Object {
                "sources": Array [
                  Object {
                    "configMap": Object {
                      "name": "botkube-config-map",
                    },
                  },
                  Object {
                    "secret": Object {
                      "name": "botkube-communication-secret",
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
]
`;

exports[`botkube-nodeselector 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "resource_config.yaml": "[\\"## Resources you want to watch\\",\\"resources:\\",\\"- name: RESOURCE            # K8s Resource you want to monitor.\\",\\"                            # Resource name must be in\\",\\"                            # group/version/resource (G/V/R) format\\",\\"                            # for core resources with no group,\\",\\"                            # ignore group fron g/v/r and use v/r\\",\\"                            # resource name should be plural\\",\\"                            # (e.g v1/pods, v1.ingresses, etc)\\",\\"\\",\\"  namespaces:         \\",\\"    include:                # List of namespaces to monitor for\\",\\"                            # the RESOURCE events\\",\\"    - namespace/all         # Use all to monitor all the resources\\",\\"\\",\\"    ignore:                 # List of namespaces to be ignored\\",\\"                            # used only with include: all\\",\\"    - <namespace>           # example : include [all], ignore [x,y,z]\\",\\"\\",\\"  events:                   # List of lifecycle events you want to\\",\\"  - create                  # receive notifications about\\",\\"  - update                  # Valid options are: \\",\\"  - delete                  # create, update, delete, error OR all\\",\\"  - error\\",\\"  \\",\\"  updateSetting:            # Set include diff with the update event \\",\\"                            # about the changes in specific fields\\",\\"    includeDiff: true       # updateSettings are ignored if \`update\`\\",\\"                            # events are not configured for the resource\\",\\"\\",\\"    fields:\\",\\"    - JSONPath              # List of JSONPath expressions to monitor\\",\\"                            # changes in specific fields\\",\\"- name: apps/v1/deployments\\",\\"  namespaces:\\",\\"    include:\\",\\"    - dev\\",\\"    - qa\\",\\"    - default\\",\\"    ignore:\\",\\"    - kube-system\\",\\"    - prod\\",\\"  updateSetting:\\",\\"    includeDiff: true\\",\\"    fields:\\",\\"    - spec.template.spec.containers[*].image\\",\\"    - status.availableReplicas\\",\\"  events:\\",\\"  - all\\",\\"\\",\\"# Check true if you want to receive recommendations\\",\\"# about the best practices for the created resource\\",\\"recommendations: true\\",\\"\\",\\"# Cluster Setting to manage command execution access\\",\\"settings:\\",\\"  # Set cluster name to differentiate incoming messages\\",\\"  clustername: not-configured\\",\\"  # Kubectl executor configs\\",\\"  kubectl:\\",\\"    # Set true to enable kubectl commands execution\\",\\"    enabled: false\\",\\"    # List of allowed commands\\",\\"    commands:\\",\\"      # kubectl method which are allowed with BotKube command\\",\\"      verbs: [\\\\\\"api-resources\\\\\\", \\\\\\"api-versions\\\\\\", \\\\\\"cluster-info\\\\\\", \\\\\\"describe\\\\\\", \\\\\\"diff\\\\\\", \\\\\\"explain\\\\\\", \\\\\\"get\\\\\\", \\\\\\"logs\\\\\\", \\\\\\"top\\\\\\", \\\\\\"auth\\\\\\"]\\",\\"      # resources on which kubectl methods are allowed with BotKube commands\\",\\"      resources: [\\\\\\"deployments\\\\\\", \\\\\\"pods\\\\\\" , \\\\\\"namespaces\\\\\\", \\\\\\"daemonsets\\\\\\", \\\\\\"statefulsets\\\\\\", \\\\\\"storageclasses\\\\\\", \\\\\\"nodes\\\\\\"]\\",\\"    # set Namespace to execute botkube kubectl commands by default\\",\\"    defaultNamespace: default\\",\\"    # Set true to enable commands execution from configured channel only\\",\\"    restrictAccess: false\\",\\"  # Set true to enable config watcher\\",\\"  configwatcher: true\\",\\"  # Set false to disable upgrade notification\\",\\"  upgradeNotifier: true\\"]",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-configmap",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "name": "botkube-cluster-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "*",
        ],
        "resources": Array [
          "*",
        ],
        "verbs": Array [
          "get",
          "watch",
          "list",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "botkube-clusterrole",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccounts",
        "name": "botkube-service-account",
      },
    ],
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
        "component": "controller",
      },
      "name": "botkube",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "app": "botkube",
          "component": "controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "botkube",
            "component": "controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "CONFIG_PATH",
                  "value": "/config/",
                },
                Object {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
              ],
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "name": "botkube",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/config",
                  "name": "config-volume",
                },
              ],
            },
          ],
          "nodeSelector": Object {
            "testing": "test-key",
          },
          "securityContext": Object {
            "runAsGroup": 101,
            "runAsUser": 101,
          },
          "serviceAccountName": "botkube-sa",
          "tolerations": Array [],
          "volumes": Array [
            Object {
              "name": "config-volume",
              "projected": Object {
                "sources": Array [
                  Object {
                    "configMap": Object {
                      "name": "botkube-config-map",
                    },
                  },
                  Object {
                    "secret": Object {
                      "name": "botkube-communication-secret",
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
]
`;

exports[`botkube-secrets 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "resource_config.yaml": "[\\"## Resources you want to watch\\",\\"resources:\\",\\"- name: RESOURCE            # K8s Resource you want to monitor.\\",\\"                            # Resource name must be in\\",\\"                            # group/version/resource (G/V/R) format\\",\\"                            # for core resources with no group,\\",\\"                            # ignore group fron g/v/r and use v/r\\",\\"                            # resource name should be plural\\",\\"                            # (e.g v1/pods, v1.ingresses, etc)\\",\\"\\",\\"  namespaces:         \\",\\"    include:                # List of namespaces to monitor for\\",\\"                            # the RESOURCE events\\",\\"    - namespace/all         # Use all to monitor all the resources\\",\\"\\",\\"    ignore:                 # List of namespaces to be ignored\\",\\"                            # used only with include: all\\",\\"    - <namespace>           # example : include [all], ignore [x,y,z]\\",\\"\\",\\"  events:                   # List of lifecycle events you want to\\",\\"  - create                  # receive notifications about\\",\\"  - update                  # Valid options are: \\",\\"  - delete                  # create, update, delete, error OR all\\",\\"  - error\\",\\"  \\",\\"  updateSetting:            # Set include diff with the update event \\",\\"                            # about the changes in specific fields\\",\\"    includeDiff: true       # updateSettings are ignored if \`update\`\\",\\"                            # events are not configured for the resource\\",\\"\\",\\"    fields:\\",\\"    - JSONPath              # List of JSONPath expressions to monitor\\",\\"                            # changes in specific fields\\",\\"- name: apps/v1/deployments\\",\\"  namespaces:\\",\\"    include:\\",\\"    - dev\\",\\"    - qa\\",\\"    - default\\",\\"    ignore:\\",\\"    - kube-system\\",\\"    - prod\\",\\"  updateSetting:\\",\\"    includeDiff: true\\",\\"    fields:\\",\\"    - spec.template.spec.containers[*].image\\",\\"    - status.availableReplicas\\",\\"  events:\\",\\"  - all\\",\\"\\",\\"# Check true if you want to receive recommendations\\",\\"# about the best practices for the created resource\\",\\"recommendations: true\\",\\"\\",\\"# Cluster Setting to manage command execution access\\",\\"settings:\\",\\"  # Set cluster name to differentiate incoming messages\\",\\"  clustername: not-configured\\",\\"  # Kubectl executor configs\\",\\"  kubectl:\\",\\"    # Set true to enable kubectl commands execution\\",\\"    enabled: false\\",\\"    # List of allowed commands\\",\\"    commands:\\",\\"      # kubectl method which are allowed with BotKube command\\",\\"      verbs: [\\\\\\"api-resources\\\\\\", \\\\\\"api-versions\\\\\\", \\\\\\"cluster-info\\\\\\", \\\\\\"describe\\\\\\", \\\\\\"diff\\\\\\", \\\\\\"explain\\\\\\", \\\\\\"get\\\\\\", \\\\\\"logs\\\\\\", \\\\\\"top\\\\\\", \\\\\\"auth\\\\\\"]\\",\\"      # resources on which kubectl methods are allowed with BotKube commands\\",\\"      resources: [\\\\\\"deployments\\\\\\", \\\\\\"pods\\\\\\" , \\\\\\"namespaces\\\\\\", \\\\\\"daemonsets\\\\\\", \\\\\\"statefulsets\\\\\\", \\\\\\"storageclasses\\\\\\", \\\\\\"nodes\\\\\\"]\\",\\"    # set Namespace to execute botkube kubectl commands by default\\",\\"    defaultNamespace: default\\",\\"    # Set true to enable commands execution from configured channel only\\",\\"    restrictAccess: false\\",\\"  # Set true to enable config watcher\\",\\"  configwatcher: true\\",\\"  # Set false to disable upgrade notification\\",\\"  upgradeNotifier: true\\"]",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-configmap",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "name": "botkube-cluster-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "*",
        ],
        "resources": Array [
          "*",
        ],
        "verbs": Array [
          "get",
          "watch",
          "list",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "botkube-clusterrole",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccounts",
        "name": "botkube-service-account",
      },
    ],
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
        "component": "controller",
      },
      "name": "botkube",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "app": "botkube",
          "component": "controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "botkube",
            "component": "controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "CONFIG_PATH",
                  "value": "/config/",
                },
                Object {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
              ],
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "name": "botkube",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/config",
                  "name": "config-volume",
                },
              ],
            },
          ],
          "nodeSelector": Object {},
          "securityContext": Object {
            "runAsGroup": 101,
            "runAsUser": 101,
          },
          "serviceAccountName": "botkube-sa",
          "tolerations": Array [],
          "volumes": Array [
            Object {
              "name": "config-volume",
              "projected": Object {
                "sources": Array [
                  Object {
                    "configMap": Object {
                      "name": "botkube-config-map",
                    },
                  },
                  Object {
                    "secret": Object {
                      "name": "testSecretName",
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
]
`;

exports[`botkube-tolerations 1`] = `
Array [
  Object {
    "apiVersion": "v1",
    "data": Object {
      "resource_config.yaml": "[\\"## Resources you want to watch\\",\\"resources:\\",\\"- name: RESOURCE            # K8s Resource you want to monitor.\\",\\"                            # Resource name must be in\\",\\"                            # group/version/resource (G/V/R) format\\",\\"                            # for core resources with no group,\\",\\"                            # ignore group fron g/v/r and use v/r\\",\\"                            # resource name should be plural\\",\\"                            # (e.g v1/pods, v1.ingresses, etc)\\",\\"\\",\\"  namespaces:         \\",\\"    include:                # List of namespaces to monitor for\\",\\"                            # the RESOURCE events\\",\\"    - namespace/all         # Use all to monitor all the resources\\",\\"\\",\\"    ignore:                 # List of namespaces to be ignored\\",\\"                            # used only with include: all\\",\\"    - <namespace>           # example : include [all], ignore [x,y,z]\\",\\"\\",\\"  events:                   # List of lifecycle events you want to\\",\\"  - create                  # receive notifications about\\",\\"  - update                  # Valid options are: \\",\\"  - delete                  # create, update, delete, error OR all\\",\\"  - error\\",\\"  \\",\\"  updateSetting:            # Set include diff with the update event \\",\\"                            # about the changes in specific fields\\",\\"    includeDiff: true       # updateSettings are ignored if \`update\`\\",\\"                            # events are not configured for the resource\\",\\"\\",\\"    fields:\\",\\"    - JSONPath              # List of JSONPath expressions to monitor\\",\\"                            # changes in specific fields\\",\\"- name: apps/v1/deployments\\",\\"  namespaces:\\",\\"    include:\\",\\"    - dev\\",\\"    - qa\\",\\"    - default\\",\\"    ignore:\\",\\"    - kube-system\\",\\"    - prod\\",\\"  updateSetting:\\",\\"    includeDiff: true\\",\\"    fields:\\",\\"    - spec.template.spec.containers[*].image\\",\\"    - status.availableReplicas\\",\\"  events:\\",\\"  - all\\",\\"\\",\\"# Check true if you want to receive recommendations\\",\\"# about the best practices for the created resource\\",\\"recommendations: true\\",\\"\\",\\"# Cluster Setting to manage command execution access\\",\\"settings:\\",\\"  # Set cluster name to differentiate incoming messages\\",\\"  clustername: not-configured\\",\\"  # Kubectl executor configs\\",\\"  kubectl:\\",\\"    # Set true to enable kubectl commands execution\\",\\"    enabled: false\\",\\"    # List of allowed commands\\",\\"    commands:\\",\\"      # kubectl method which are allowed with BotKube command\\",\\"      verbs: [\\\\\\"api-resources\\\\\\", \\\\\\"api-versions\\\\\\", \\\\\\"cluster-info\\\\\\", \\\\\\"describe\\\\\\", \\\\\\"diff\\\\\\", \\\\\\"explain\\\\\\", \\\\\\"get\\\\\\", \\\\\\"logs\\\\\\", \\\\\\"top\\\\\\", \\\\\\"auth\\\\\\"]\\",\\"      # resources on which kubectl methods are allowed with BotKube commands\\",\\"      resources: [\\\\\\"deployments\\\\\\", \\\\\\"pods\\\\\\" , \\\\\\"namespaces\\\\\\", \\\\\\"daemonsets\\\\\\", \\\\\\"statefulsets\\\\\\", \\\\\\"storageclasses\\\\\\", \\\\\\"nodes\\\\\\"]\\",\\"    # set Namespace to execute botkube kubectl commands by default\\",\\"    defaultNamespace: default\\",\\"    # Set true to enable commands execution from configured channel only\\",\\"    restrictAccess: false\\",\\"  # Set true to enable config watcher\\",\\"  configwatcher: true\\",\\"  # Set false to disable upgrade notification\\",\\"  upgradeNotifier: true\\"]",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-configmap",
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "name": "botkube-cluster-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "*",
        ],
        "resources": Array [
          "*",
        ],
        "verbs": Array [
          "get",
          "watch",
          "list",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
      },
      "name": "botkube-service-account",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "botkube-clusterrole",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccounts",
        "name": "botkube-service-account",
      },
    ],
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app": "botkube",
        "component": "controller",
      },
      "name": "botkube",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "app": "botkube",
          "component": "controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app": "botkube",
            "component": "controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "env": Array [
                Object {
                  "name": "CONFIG_PATH",
                  "value": "/config/",
                },
                Object {
                  "name": "LOG_LEVEL",
                  "value": "info",
                },
              ],
              "image": "ghcr.io/infracloudio/botkube:v0.12.4",
              "imagePullPolicy": "IfNotPresent",
              "name": "botkube",
              "volumeMounts": Array [
                Object {
                  "mountPath": "/config",
                  "name": "config-volume",
                },
              ],
            },
          ],
          "nodeSelector": Object {},
          "securityContext": Object {
            "runAsGroup": 101,
            "runAsUser": 101,
          },
          "serviceAccountName": "botkube-sa",
          "tolerations": Array [
            Object {
              "effect": "NoExecute",
              "key": "node.kubernetes.io/not-ready",
              "operator": "Exists",
              "tolerationSeconds": 300,
            },
          ],
          "volumes": Array [
            Object {
              "name": "config-volume",
              "projected": Object {
                "sources": Array [
                  Object {
                    "configMap": Object {
                      "name": "botkube-config-map",
                    },
                  },
                  Object {
                    "secret": Object {
                      "name": "botkube-communication-secret",
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    },
  },
]
`;
